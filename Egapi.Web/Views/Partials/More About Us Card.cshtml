@inherits Umbraco.Web.Mvc.UmbracoViewPage<ContentModels.ContentPage>
@using ContentModels = Umbraco.Web.PublishedModels;
@using System.Text.RegularExpressions;
@{
    // RICHTEXT EDITOR EM CODIGO
    var title = Model.MacroParameters["additionalInformationTitle"] as string;
    var image = Model.MacroParameters["additionalInformationImage"] as string;

    // Create a variable for the GUID of the page you want to update
    var guid = Guid.Parse("32e60db4-1283-4caa-9645-f2153f9888ef");

    // Get the page using the GUID you've defined
    var content = Services.ContentService.GetById(guid); // ID of your page

    // Create a variable for the desired value
    var htmlValue = new HtmlString("Add some text <strong>here</strong>");

    // Set the value of the property with alias 'richText'.
    content.SetValue("richText", htmlValue);

    // Save the change
    Services.ContentService.Save(content);
}
@{
    var selection = Umbraco.Content(Guid.Parse("79f8284c-ebc9-416f-9571-951c93041d24"))
    .ChildrenOfType("contentPage")
    .Where(x => x.IsVisible())
    .Take(3);
}
<div class="mt-4">
    <div class="title-separator row">
        <div class="col">
            <h2>Saiba mais sobre os nossos produtos</h2>
        </div>
    </div>
    <div class="card-deck">
        @foreach (var item in selection)
        {
            //transforms the html text into text
            var htmlText = item.Value("contentPageText").ToString();
            var immmmmmm = item.Value<IEnumerable<IPublishedContent>>("contentPageImages");

            //gets the first paragraph
            Match m = Regex.Match(htmlText, @"<p>\s*(.+?)\s*</p>");

            //removes the <p> tag
            var text = Regex.Replace(m.Groups[0].Value, "<.*?>", String.Empty);

            <div class="card more-about">
                <!-- https://www.google.com/search?q=System.Collections.Generic.List%601%5BUmbraco.Core.Models.MediaWithCrops%5D&oq=System.Collections.Generic.List%601%5BUmbraco.Core.Models.MediaWithCrops%5D&aqs=edge..69i57.599j0j4&sourceid=chrome&ie=UTF-8 -->
                @{
                    //gets the first photo of the slider to display it on the card
                    int i = 0;
                    foreach (var img in immmmmmm)
                    {
                        if (i == 0)
                        {
                            i++;
                            <img class="card-img-top" src="@img.Url" alt="Card Image">
                            break;
                        }
                    }
                }
                <div class="card-body">
                    <h5 class="card-title">@item.Value("contentPageTitle")</h5>
                    <p class="card-text">@text</p>
                </div>
                <div class="card-footer">
                    <div><strong><a href="@item.Url">Read more</a></strong></div>
                </div>
            </div>
        }
    </div>
</div>
